{
	"info": {
		"_postman_id": "e2e26ce7-2c6d-4a9e-8c8c-b0772a4ec226",
		"name": "Orion-via-pepproxy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Keyrock - create access token for alice-the-admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a9818d69-8202-43b0-822d-ee8e0c39e00d",
						"exec": [
							"pm.environment.set(\"access_token\", pm.response.json().access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "tutorial-dckr-site-0000-clientsecret",
							"type": "string"
						},
						{
							"key": "username",
							"value": "tutorial-dckr-site-0000-xpresswebapp",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries",
						"disabled": true
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "alice-the-admin@test.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "test",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						}
					],
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{keyrock}}/oauth2/token",
					"protocol": "http",
					"host": [
						"{{keyrock}}"
					],
					"path": [
						"oauth2",
						"token"
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Keyrock - create access token for bob-the-manager",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b68b7728-206c-4a3a-87f3-9b37f2a192da",
						"exec": [
							"pm.environment.set(\"access_token\", pm.response.json().access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "tutorial-dckr-site-0000-clientsecret",
							"type": "string"
						},
						{
							"key": "username",
							"value": "tutorial-dckr-site-0000-xpresswebapp",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries",
						"disabled": true
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "bob-the-manager@test.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "test",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						}
					],
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{keyrock}}/oauth2/token",
					"protocol": "http",
					"host": [
						"{{keyrock}}"
					],
					"path": [
						"oauth2",
						"token"
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion-Proxy - all entities using access token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "924b0806-f29c-485f-a9e6-55151b2eeb57",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"disabled": true
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://{{orion-proxy}}/v2/entities",
					"protocol": "http",
					"host": [
						"{{orion-proxy}}"
					],
					"path": [
						"v2",
						"entities"
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion-Proxy - all entities using wrong token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "76deb34a-f6cc-4774-a846-2bb0421fac64",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "thisisnotavalidtoken",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"disabled": true
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://{{orion-proxy}}/v2/entities",
					"protocol": "http",
					"host": [
						"{{orion-proxy}}"
					],
					"path": [
						"v2",
						"entities"
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Get one entity - e.g. user1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "fiware-service",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion-proxy}}/v2/entities/urn:ngsi-ld:Person:user1",
					"protocol": "http",
					"host": [
						"{{orion-proxy}}"
					],
					"path": [
						"v2",
						"entities",
						"urn:ngsi-ld:Person:user1"
					]
				},
				"description": "Once a dynamic context system is up and running, we need to inform **STH-Comet** directly of changes in context.\nThe rate of change of the **Motion Sensor** is driven by events in the real-world. We need to receive\nevery event to be able to aggregate the results.\n\nThis is done by making a POST request to the `/v2/subscription` endpoint of the Orion Context Broker.\n\n* The `fiware-service` and `fiware-servicepath` headers are used to filter the subscription to only listen to measurements from the attached IoT Sensors\n* The `idPattern` in the request body ensures that **STH-Comet** will be informed of all **Motion Sensor** data changes.\n* The notification `url` must match the configured `STH_PORT`\n* The `attrsFormat=legacy` is required since **STH-Comet** currently only accepts notifications in the older NGSI v1 format."
			},
			"response": []
		},
		{
			"name": "Orion - Filter entities - e.g. user1's boards",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "fiware-service",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion-proxy}}/v2/entities/?type=Board&q=refUser==urn:ngsi-ld:Person:user1",
					"protocol": "http",
					"host": [
						"{{orion-proxy}}"
					],
					"path": [
						"v2",
						"entities",
						""
					],
					"query": [
						{
							"key": "type",
							"value": "Board"
						},
						{
							"key": "q",
							"value": "refUser==urn:ngsi-ld:Person:user1"
						}
					]
				},
				"description": "Once a dynamic context system is up and running, we need to inform **STH-Comet** directly of changes in context.\nThe rate of change of the **Motion Sensor** is driven by events in the real-world. We need to receive\nevery event to be able to aggregate the results.\n\nThis is done by making a POST request to the `/v2/subscription` endpoint of the Orion Context Broker.\n\n* The `fiware-service` and `fiware-servicepath` headers are used to filter the subscription to only listen to measurements from the attached IoT Sensors\n* The `idPattern` in the request body ensures that **STH-Comet** will be informed of all **Motion Sensor** data changes.\n* The notification `url` must match the configured `STH_PORT`\n* The `attrsFormat=legacy` is required since **STH-Comet** currently only accepts notifications in the older NGSI v1 format."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3eed6185-f7c1-4522-9c73-72ae7d0b9b45",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "a5b04e4e-a5c6-4b9f-aa13-b4a1f89d4257",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "4797ee8d-3657-46b1-a8bd-93fb29d1a320",
			"key": "orion-proxy",
			"value": "localhost:1027"
		},
		{
			"id": "9078f352-b7cc-409e-aa4d-94feda17f38b",
			"key": "keyrock",
			"value": "localhost:3005"
		}
	],
	"protocolProfileBehavior": {}
}