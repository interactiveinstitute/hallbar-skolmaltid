{
	"info": {
		"_postman_id": "65353e3f-e110-48ae-aa56-c5cc6dce8b77",
		"name": "hallbar_skolmaltid_server_init",
		"description": "This tutorial is an introduction to [FIWARE STH-Comet](https://fiware-sth-comet.readthedocs.io/) - a generic enabler which is used to retrieve trend data from a Mongo-DB database. The tutorial activates the IoT sensors connected in the [previous tutorial](https://github.com/Fiware/tutorials.IoT-Agent) and persists measurements from those sensors into a database and retrieves time-based aggregations of that data.\n\nThe `docker-compose` files for this tutorial can be found on GitHub: \n\n![GitHub](https://fiware.github.io/tutorials.Short-Term-History/icon/GitHub-Mark-32px.png) [FIWARE 303: Short Term Historic Data](https://github.com/Fiware/tutorials.Short-Term-History)\n\n# Querying Time Series Data\n\n> \"The *\"moment\"* has no yesterday or tomorrow. It is not the result of thought and therefore has no time.\"\n>\n> â€” Bruce Lee\n\n\nWithin the FIWARE platform, historical context data can be persisted to a database using a combination of the **Orion \nContext Broker** and the **Cygnus** generic enabler. This results in a series of data points being written to the\ndatabase of your choice. Each time-stamped data point represents the state of context entities at a given moment in time.\nThe individual data points are relatively meaningless on their own, it is only through combining a series data points\nthat meaningful statistics such as maxima, minima and trends can be observed.\n\nThe creation and analysis of trend data is a common requirement of context-driven systems - therefore the FIWARE platform \noffers a generic enabler ([STH-Comet](https://fiware-sth-comet.readthedocs.io/)) specifically to deal with the issue of persisting and interpreting time series data. **STH-Comet** itself can be used in two modes:\n\n* In *minimal* mode, **STH-Comet** is responsible for both data collection and interpreting the data when requested\n* In *formal* mode, the collection of data is delegated to **Cygnus**, **STH-Comet** merely reads from an existing database.\n\nOf the two modes of operation, the *formal* mode is more flexible, but *minimal* mode is simpler and easier to set-up. The key differences between the two are summarized in the table below:\n\n\n|                                                         | *minimal* mode                | *formal* mode              |\n|---------------------------------------------------------|-------------------------------|----------------------------|\n| Is the system easy to set-up  properly?                 | Only one configuration supported - Easy to set up                | Highly configurable - Complex to set up          |\n| Which component is responsible for a data persistance?  | **STH-Comet**                 | **Cygnus**                 |\n| What is the role of **STH-Comet**?                      | Reading and writing data      | Data Read only             |\n| What is the role of **Cygnus**?                         | Not Used                      | Data Write only            |\n| Where is the data aggregated?                           | Mongo-DB database connected to **STH-Comet** only| Mongo-DB database connected to both **Cygnus** and **STH-Comet** |\n| Can the system be configured to use other databases?    | No                            | Yes                        |\n| Does the solution scale easily?                         | Does not scale easily - use for simple systems | Scales easily - use for complex systems |\n| Can the system cope with high rates of throughput?      | No - use where throughput is low | Yes - use where throughput is high |\n\n\n## Analyzing time series data\n\nThe appropriate use of time series data analysis will depend on your use case and the reliability of the data measurements you receive. Time series data analysis can be used to answer questions such as:\n\n* What was the maximum measurement of a device within a given time period?\n* What was the average measurement of a device within a given time period?\n* What was the sum of the measurements sent by a device within a given time period?\n\nIt can also be used to reduce the signficance of each individual data point to exclude outliers by smoothing.\n\n\n\n#### Device Monitor\n\nFor the purpose of this tutorial, a series of dummy IoT devices have been created, which will be attached to the context broker. Details of the architecture and protocol used can be found in the [IoT Sensors tutorial](https://github.com/Fiware/tutorials.IoT-Sensors).\nThe state of each device can be seen on the UltraLight device monitor web-page found at: `http://localhost:3000/device/monitor`\n\n![FIWARE Monitor](https://fiware.github.io/tutorials.Short-Term-History/img/device-monitor.png)\n\n\n\n# Architecture\n\nThis application builds on the components and dummy IoT devices created in \n[previous tutorials](https://github.com/Fiware/tutorials.IoT-Agent/). It will use three or four FIWARE components depending on the configuration of the system:\nthe [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/), the\n[IoT Agent for Ultralight 2.0](http://fiware-iotagent-ul.readthedocs.io/en/latest/),\n[STH-Comet](http://fiware-cygnus.readthedocs.io/en/latest/) and\n[Cygnus](http://fiware-cygnus.readthedocs.io/en/latest/). \n\nTherefore the overall architecture will consist of the following elements:\n\n* Four **FIWARE Generic Enablers**:\n  * The FIWARE [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/) which will receive requests using [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2)\n  * The FIWARE [IoT Agent for Ultralight 2.0](http://fiware-iotagent-ul.readthedocs.io/en/latest/) which will receive northbound measurements from the dummy IoT devices in [Ultralight 2.0](http://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual) format and convert them to [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2) requests for the context broker to alter the state of the context entities\n  * FIWARE [STH-Comet](http://fiware-sth-comet.readthedocs.io/) will:\n    + interpret time-based data queries\n    + subscribe to context changes and persist them into a **Mongo-DB** database  (*minimal* mode only)\n   * FIWARE [Cygnus](http://fiware-cygnus.readthedocs.io/en/latest/) where it will subscribe to context changes and persist them into a **Mongo-DB** database (*formal* mode only) \n\n> :information_source: **Note:** **Cygnus** will only be used if **STH-Comet** is configured in *formal* mode.\n\n* A [MongoDB](https://www.mongodb.com/) database:\n  * Used by the **Orion Context Broker** to hold context data information such as data entities, subscriptions and registrations\n  * Used by the **IoT Agent** to hold device information such as device URLs and Keys\n  * Used as a data sink to hold time-based historical context data\n     + In *minimal* mode - this is read and populated by **STH-Comet** \n     + In *formal* mode - this is populated by **Cygnus**  and read by **STH-Comet** \n* Three **Context Providers**:\n  * The **Stock Management Frontend** is not used in this tutorial. It does the following:\n    + Display store information and allow users to interact with the dummy IoT devices\n    + Show which products can be bought at each store\n    + Allow users to \"buy\" products and reduce the stock count.\n  * A webserver acting as set of [dummy IoT devices](https://github.com/Fiware/tutorials.IoT-Sensors) using the [Ultralight 2.0](http://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual) protocol running over HTTP.\n  * The **Context Provider NGSI** proxy is not used in this tutorial. It does the following:\n    + receive requests using [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2)\n    + makes requests to publicly available data sources using their own APIs in a proprietary format \n    + returns context data back to the Orion Context Broker in [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2) format.\n\n\n\n\nSince all interactions between the elements are initiated by HTTP requests, the entities can be containerized and run from exposed ports. \n\nThe specific architecture of both the *minimal* and *formal* configurations is discussed below.\n\n\n\n# Prerequisites\n\n## Docker and Docker Compose \n\nTo keep things simple all components will be run using [Docker](https://www.docker.com). **Docker** is a container technology which allows to different components isolated into their respective environments. \n\n* To install Docker on Windows follow the instructions [here](https://docs.docker.com/docker-for-windows/)\n* To install Docker on Mac follow the instructions [here](https://docs.docker.com/docker-for-mac/)\n* To install Docker on Linux follow the instructions [here](https://docs.docker.com/install/)\n\n**Docker Compose** is a tool for defining and running multi-container Docker applications. A  series of [YAML files](https://raw.githubusercontent.com/Fiware/tutorials.Historic-Context/master/cygnus) are used configure the required\nservices for the application. This means all container services can be brought up in a single command. Docker Compose is installed by default as part of Docker for Windows and  Docker for Mac, however Linux users will need to follow the instructions found [here](https://docs.docker.com/compose/install/)\n\n## Cygwin for Windows\n\nWe will start up our services using a simple Bash script. Windows users should download [cygwin](http://www.cygwin.com/) to provide a command line functionality similar to a Linux distribution on Windows.\n\n\n\n\n# Start Up\n\nBefore you start you should ensure that you have obtained or built the necessary Docker images locally. Please run\n\n```console\n./services create\n``` \n\n>**Note** The `context-provider` image has not yet been pushed to Docker hub.\n> Failing to build the Docker sources before proceeding will result in the following error:\n>\n>```\n>Pulling context-provider (fiware/cp-web-app:latest)...\n>ERROR: The image for the service you're trying to recreate has been removed.\n>```\n\n\nThereafter, all services can be initialized from the command line by running the [services](https://github.com/Fiware/tutorials.Historic-Context/blob/master/services) Bash script provided within the repository:\n\n```console\n./services <command>\n``` \n\nWhere `<command>` will vary depending upon the mode we wish to activate.\nThis command will also import seed data from the previous tutorials and provision the dummy IoT sensors on startup.\n\n>:information_source: **Note:** If you want to clean up and start over again you can do so with the following command:\n>\n>```console\n>./services stop\n>``` \n>",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Orion - Comet - Subscribe structured schoolAttendance1",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"description\": \"Notify STH-Comet of all attendance changes\",\n  \"subject\": {\n    \"entities\": [\n      {\n        \"idPattern\": \"schoolAttendance.*\"\n      }\n    ],\n    \"condition\": {\n      \"attrs\": [\n        \"attendance\"\n      ]\n    }\n  },\n  \"notification\": {\n    \"http\": {\n      \"url\": \"http://sth-comet:8666/notify\"\n    },\n    \"attrs\": [\n      \"attendance\"\n    ],\n    \"attrsFormat\": \"legacy\"\n  }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/subscriptions/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"subscriptions",
						""
					]
				},
				"description": "Once a dynamic context system is up and running, we need to inform **STH-Comet** directly of changes in context.\nThe rate of change of the **Motion Sensor** is driven by events in the real-world. We need to receive\nevery event to be able to aggregate the results.\n\nThis is done by making a POST request to the `/v2/subscription` endpoint of the Orion Context Broker.\n\n* The `fiware-service` and `fiware-servicepath` headers are used to filter the subscription to only listen to measurements from the attached IoT Sensors\n* The `idPattern` in the request body ensures that **STH-Comet** will be informed of all **Motion Sensor** data changes.\n* The notification `url` must match the configured `STH_PORT`\n* The `attrsFormat=legacy` is required since **STH-Comet** currently only accepts notifications in the older NGSI v1 format."
			},
			"response": []
		},
		{
			"name": "Orion - Create user1",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"user1\",\n    \"type\": \"Person\",\n    \"email\": {\n    \t\"value\": \"user1@test.com\"\n    },\n    \"givenName\": {\n        \"type\": \"Text\",\n        \"value\": \"Anna\"\n    },\n    \"familyName\": {\n    \t\"type\": \"Text\",\n        \"value\": \"Andersson\"\n    },\n    \"refSchool\": {\n        \"type\": \"Reference\",\n        \"value\": [\"school1\",\"school2\"]\n    },\n    \"settings\": {\n        \"type\": \"settings\",\n        \"value\": {\n            \"currentChart\": \"kitchen\"\n        }\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Create school1",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"school1\",\n    \"type\": \"School\",\n    \"source\": {\n    \t\"value\": \"http://www.vklass.se\"\n    },\n    \"name\": {\n        \"type\": \"Text\",\n        \"value\": \"Skola 1\"\n    },\n    \"logo\": {\n        \"type\": \"URL\",\n        \"value\": \"https://vignette.wikia.nocookie.net/harrypotter/images/a/ae/Hogwartscrest.png\"\n    },\n    \"identifier\": {\n    \t\"type\": \"Text\",\n        \"value\": \"112233-4455\"\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Create school2",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"school2\",\n    \"type\": \"School\",\n    \"source\": {\n    \t\"value\": \"http://www.vklass.se\"\n    },\n    \"name\": {\n        \"type\": \"Text\",\n        \"value\": \"Skola 2\"\n    },\n    \"logo\": {\n        \"type\": \"URL\",\n        \"value\": \"https://vignette.wikia.nocookie.net/harrypotter/images/a/ae/Hogwartscrest.png\"\n    },\n    \"identifier\": {\n    \t\"type\": \"Text\",\n        \"value\": \"222233-4455\"\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Create schoolAttendance1",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"schoolAttendance1\",\n    \"type\": \"SchoolAttendance\",\n    \"source\": {\n    \t\"value\": \"http://www.vklass.se\"\n    },\n    \"attendance\": {\n        \"type\": \"attendance\",\n        \"value\": {\n            \"dateObserved\": {\n                \"type\": \"DateTime\",\n                \"value\": \"2020-02-02T00:00:00Z\"\n            },\n            \"enrolled\": {\n                \"type\": \"Integer\",\n                \"value\": 444\n            },\n            \"present\": {\n                \"type\": \"Integer\",\n                \"value\": 393\n            },\n            \"absent\": {\n                \"type\": \"Integer\",\n                \"value\": 44\n            }\n        }\n    },\n    \"refSchool\": {\n        \"type\": \"Reference\",\n        \"value\": \"school1\"\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Update schoolAttendance1 :1",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"attendance\": {\n        \"type\": \"attendance\",\n        \"value\": {\n            \"dateObserved\": {\n                \"type\": \"DateTime\",\n                \"value\": \"2020-02-03T00:00:00Z\"\n            },\n            \"enrolled\": {\n                \"type\": \"Integer\",\n                \"value\": 444\n            },\n            \"present\": {\n                \"type\": \"Integer\",\n                \"value\": 394\n            },\n            \"absent\": {\n                \"type\": \"Integer\",\n                \"value\": 45\n            }\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/schoolAttendance1/attrs",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						"schoolAttendance1",
						"attrs"
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Update schoolAttendance1 :2",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n   \"attendance\": {\n        \"type\": \"attendance\",\n        \"value\": {\n            \"dateObserved\": {\n                \"type\": \"DateTime\",\n                \"value\": \"2020-02-04T00:00:00Z\"\n            },\n            \"enrolled\": {\n                \"type\": \"Integer\",\n                \"value\": 444\n            },\n            \"present\": {\n                \"type\": \"Integer\",\n                \"value\": 395\n            },\n            \"absent\": {\n                \"type\": \"Integer\",\n                \"value\": 46\n            }\n        }\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/schoolAttendance1/attrs",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						"schoolAttendance1",
						"attrs"
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Create attendanceObserved 1",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"attendance1\",\n    \"type\": \"SchoolAttendanceObserved\",\n    \"source\": {\n    \t\"value\": \"http://www.vklass.se\"\n    },\n    \"dateObserved\": {\n        \"type\": \"DateTime\",\n        \"value\": \"2020-02-02T00:00:00Z\"\n    },\n    \"enrolled\": {\n        \"type\": \"Integer\",\n        \"value\": 444\n    },\n    \"present\": {\n        \"type\": \"Integer\",\n        \"value\": 393\n    },\n    \"absent\": {\n    \t\"type\": \"Integer\",\n        \"value\": 44\n    },\n    \"refSchool\": {\n        \"type\": \"Reference\",\n        \"value\": \"school1\"\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Create attendanceObserved 2",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"attendance2\",\n    \"type\": \"SchoolAttendanceObserved\",\n    \"source\": {\n    \t\"value\": \"http://www.vklass.se\"\n    },\n    \"dateObserved\": {\n        \"type\": \"DateTime\",\n        \"value\": \"2020-02-03T00:00:00Z\"\n    },\n    \"enrolled\": {\n        \"type\": \"Integer\",\n        \"value\": 444\n    },\n    \"present\": {\n        \"type\": \"Integer\",\n        \"value\": 394\n    },\n    \"absent\": {\n    \t\"type\": \"Integer\",\n        \"value\": 45\n    },\n    \"refSchool\": {\n        \"type\": \"Reference\",\n        \"value\": \"school1\"\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Create attendanceObserved 3",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"attendance3\",\n    \"type\": \"SchoolAttendanceObserved\",\n    \"source\": {\n    \t\"value\": \"http://www.vklass.se\"\n    },\n    \"dateObserved\": {\n        \"type\": \"DateTime\",\n        \"value\": \"2020-02-04T00:00:00Z\"\n    },\n    \"enrolled\": {\n        \"type\": \"Integer\",\n        \"value\": 444\n    },\n    \"present\": {\n        \"type\": \"Integer\",\n        \"value\": 395\n    },\n    \"absent\": {\n    \t\"type\": \"Integer\",\n        \"value\": 46\n    },\n    \"refSchool\": {\n        \"type\": \"Reference\",\n        \"value\": \"school1\"\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Create attendanceObserved",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"attendance4\",\n    \"type\": \"SchoolAttendanceObserved\",\n    \"source\": {\n    \t\"value\": \"http://www.vklass.se\"\n    },\n    \"dateObserved\": {\n        \"type\": \"DateTime\",\n        \"value\": \"2020-02-05T00:00:00Z\"\n    },\n    \"enrolled\": {\n        \"type\": \"Integer\",\n        \"value\": 444\n    },\n    \"present\": {\n        \"type\": \"Integer\",\n        \"value\": 434\n    },\n    \"absent\": {\n    \t\"type\": \"Integer\",\n        \"value\": 10\n    },\n    \"absentList\": {\n        \"type\": \"Text\",\n        \"value\": [\"Adam Adamsson\", \"BÃ¤rta Beritsdotter\", \"Calle Carlsson\", \"Ditte Doo\", \"Emil Eskilsen\", \"Frida Kahlie\", \"Ghasaan GÃ¶ransson\", \"Hadya Haddad\", \"Ingwar Igelsson\", \"Jenna Johansen\"]\n    },\n    \"refSchool\": {\n        \"type\": \"Reference\",\n        \"value\": \"school1\"\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Update attendanceObserved",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"attendance4\",\n    \"type\": \"SchoolAttendanceObserved\",\n    \"source\": {\n    \t\"value\": \"http://www.vklass.se\"\n    },\n    \"dateObserved\": {\n        \"type\": \"DateTime\",\n        \"value\": \"2020-02-05T00:00:00Z\"\n    },\n    \"enrolled\": {\n        \"type\": \"Integer\",\n        \"value\": 444\n    },\n    \"present\": {\n        \"type\": \"Integer\",\n        \"value\": 434\n    },\n    \"absent\": {\n    \t\"type\": \"Integer\",\n        \"value\": 10\n    },\n    \"absentList\": {\n        \"type\": \"Text\",\n        \"value\": [\"Adam Adamsson\", \"BÃ¤rta Beritsdotter\", \"Calle Carlsson\", \"Ditte Doo\", \"Emil Eskilsen\", \"Frida Kahlie\", \"Ghasaan GÃ¶ransson\", \"Hadya Haddad\", \"Ingwar Igelsson\", \"Jenna Johansen\"]\n    },\n    \"refSchool\": {\n        \"type\": \"Reference\",\n        \"value\": \"school1\"\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Create board1",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"board1\",\n    \"type\": \"Board\",\n    \"source\": {\n    \t\"value\": \"user\"\n    },\n    \"publicPresentationUrl\": {\n        \"type\": \"URL\",\n        \"value\": \"http://just.do.it\"\n    },\n    \"refUser\": {\n        \"type\": \"Reference\",\n        \"value\": \"user1\"\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Update board1",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"board1\",\n    \"type\": \"Board\",\n    \"source\": {\n    \t\"value\": \"user\"\n    },\n    \"publicPresentationUrl\": {\n        \"type\": \"URL\",\n        \"value\": \"http://just.do.it\"\n    },\n    \"refUser\": {\n        \"type\": \"Reference\",\n        \"value\": \"user1\"\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Create board2",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"board2\",\n    \"type\": \"Board\",\n    \"source\": {\n    \t\"value\": \"user\"\n    },\n    \"publicPresentationUrl\": {\n        \"type\": \"URL\",\n        \"value\": \"http://just.do.it\"\n    },\n    \"refUser\": {\n        \"type\": \"Reference\",\n        \"value\": \"user1\"\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Create graphType1",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"graphType1\",\n    \"type\": \"GraphType\",\n    \"source\": {\n    \t\"value\": \"user\"\n    },\n    \"dataType\": {\n        \"type\": \"Text\",\n        \"value\": [\"Text\"]\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Create graphTypeSchoolAttendance",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"graphTypeSchoolAttendance\",\n    \"type\": \"GraphType\",\n    \"source\": {\n    \t\"value\": \"user\"\n    },\n    \"dataType\": {\n        \"type\": \"Text\",\n        \"value\": [\"Text\",\"School\"]\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Create graph1",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"graph1\",\n    \"type\": \"Graph\",\n    \"source\": {\n    \t\"value\": \"user\"\n    },\n    \"refBoard\": {\n        \"type\": \"Reference\",\n        \"value\": \"board1\"\n    },\n    \"refGraphType\": {\n        \"type\": \"Reference\",\n        \"value\": \"graphType1\"\n    },\n    \"connectedData\": {\n        \"type\": \"Text\",\n        \"value\": [\"cool data\"]\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Update graph1",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"graph1\",\n    \"type\": \"Graph\",\n    \"source\": {\n    \t\"value\": \"user\"\n    },\n    \"refBoard\": {\n        \"type\": \"Reference\",\n        \"value\": \"board1\"\n    },\n    \"refGraphType\": {\n        \"type\": \"Reference\",\n        \"value\": \"graphType1\"\n    },\n    \"connectedData\": {\n        \"type\": \"Text\",\n        \"value\": [\"cool data\"]\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Create graph2",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"graph2\",\n    \"type\": \"Graph\",\n    \"source\": {\n    \t\"value\": \"user\"\n    },\n    \"refBoard\": {\n        \"type\": \"Reference\",\n        \"value\": \"board1\"\n    },\n    \"refGraphType\": {\n        \"type\": \"Reference\",\n        \"value\": \"graphTypeSchoolAttendance\"\n    },\n    \"connectedData\": {\n        \"type\": \"Text\",\n        \"value\": [\"Adam Adamsson, Frida Kahlie\",\"school1\"]\n    }\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		},
		{
			"name": "Orion - Update graph2",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "fiware-service",
						"type": "text",
						"value": "timeseries"
					},
					{
						"key": "fiware-servicepath",
						"type": "text",
						"value": "/"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"value\": [\"Adam Adamsson, Frida Kahlie, Kalle Kobra\", \"school1\"]\n}",
					"options": {
						"raw": {}
					}
				},
				"url": {
					"raw": "http://{{orion}}/v2/entities/graph2/attrs/connectedData",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						"graph2",
						"attrs",
						"connectedData"
					]
				},
				"description": "## Creating Context Data\n\nAt its heart, FIWARE is a system for managing context information, so lets add some context data into the system by creating a  new entity (a store in **Berlin**). Any entity must have a `id` and `type` attributes, additional attributes are optional and will depend on the system being described. Each additional attribute should also have a defined `type` and a `value` attribute."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8b32973a-4c7c-4e77-918a-9e7cab208131",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "90bd44d3-9d3c-442d-8a0d-3ff1ce2960c4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "8bc95d52-c0d4-463b-a345-4e5c20b5c03c",
			"key": "orion",
			"value": "localhost:1026",
			"type": "string"
		},
		{
			"id": "082dbbed-9f6c-4af0-97a8-a4945d1fe2e0",
			"key": "sth-comet",
			"value": "localhost:8666",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}